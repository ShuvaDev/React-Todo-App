{"version":3,"sources":["components/controllers/search-panel.jsx","components/controllers/view-controller.jsx","components/controllers/filter-controller.jsx","components/controllers/bulk-controller.jsx","components/controllers/index.jsx","components/listview/index.jsx","components/tableview/index.jsx","components/create-todo-form/index.jsx","components/todos/index.jsx","app.jsx","serviceWorker.js","index.js"],"names":["SearchPanel","term","handleSearch","toggleForm","className","Input","palceholder","value","onChange","e","target","Button","color","onClick","ViewController","view","changeView","Label","for","CustomInput","type","name","id","checked","FilterController","handleFilter","ButtonGroup","BulkController","clearSelected","clearCompleted","reset","Controller","Row","Col","md","size","ListItem","todo","toggleSelect","toggleComplete","ListGroupItem","isSelect","text","time","toDateString","isComplete","ListView","todos","ListGroup","map","key","RowItem","scope","TableView","Table","CreateTodoForm","state","description","handleChange","event","setState","handleSubmit","preventDefault","props","createTodo","Form","onSubmit","this","FormGroup","placeholder","React","Component","Todos","Date","isOpenTodoFrom","searchTerm","filter","todoId","find","t","performSearch","toLowerCase","includes","shortid","generate","performFilter","console","log","getView","Modal","isOpen","toggle","ModalHeader","ModalBody","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.289e88fc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Input, Button} from 'reactstrap'\r\n\r\nconst SearchPanel = ({term, handleSearch, toggleForm}) => (\r\n    <div className='d-flex'>\r\n        <Input\r\n            palceholder='Enter Search Term'\r\n            className='mr-3'\r\n            value={term}\r\n            onChange={e => handleSearch(e.target.value)}\r\n        />\r\n        <Button color='success' onClick={toggleForm}>\r\n            New\r\n        </Button>\r\n    </div>\r\n)\r\nSearchPanel.propTypes = {\r\n    term: PropTypes.string.isRequired,\r\n    handleSearch: PropTypes.func.isRequired,\r\n    toggleForm: PropTypes.func.isRequired\r\n}\r\n\r\nexport default SearchPanel","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Label, CustomInput} from 'reactstrap'\r\n\r\nconst ViewController = ({view, changeView}) => (\r\n    <div className='d-flex'>\r\n        <Label for='list-view'>\r\n            <CustomInput\r\n                type='radio'\r\n                name='view'\r\n                id='list-view'\r\n                value='list'\r\n                onChange={changeView}\r\n                className='d-inline-block'\r\n                checked={view === 'list'}\r\n            /> List View\r\n        </Label>\r\n        <Label for='table-view' className='ml-3'>\r\n            <CustomInput\r\n                type='radio'\r\n                name='view'\r\n                id='table-view'\r\n                value='table'\r\n                onChange={changeView}\r\n                className='d-inline-block'\r\n                checked={view === 'table'}\r\n            />\r\n        </Label> Table View\r\n    </div>\r\n)\r\nViewController.propTypes = {\r\n    view: PropTypes.string.isRequired,\r\n    changeView: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ViewController","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {Button, ButtonGroup} from 'reactstrap'\r\n\r\nconst FilterController = ({handleFilter}) => (\r\n    <ButtonGroup>\r\n        <Button onClick={() => handleFilter('all')} color='secondary'>\r\n            All\r\n        </Button>\r\n        <Button onClick={() => handleFilter('running')} color='secondary'>\r\n            Running\r\n        </Button>\r\n        <Button onClick={() => handleFilter('completed')} color='secondary'>\r\n            Completed\r\n        </Button>\r\n    </ButtonGroup>\r\n)\r\nFilterController.propTypes = {\r\n    handleFilter: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FilterController","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {ButtonGroup, Button} from 'reactstrap'\r\n\r\nconst BulkController = ({ clearSelected, clearCompleted, reset }) => (\r\n    <ButtonGroup>\r\n        <Button color='danger' onClick={clearSelected}>\r\n            Clear Selected\r\n        </Button>\r\n        <Button color='danger' onClick={clearCompleted}>\r\n            Clear Completed\r\n        </Button>\r\n        <Button color='danger' onClick={reset}>\r\n            Reset\r\n        </Button>\r\n    </ButtonGroup>\r\n)\r\nBulkController.propTypes = {\r\n    clearSelected: PropTypes.func.isRequired,\r\n    clearCompleted: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BulkController","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport SearchPanel from './search-panel'\r\nimport ViewController from './view-controller'\r\nimport FilterController from './filter-controller'\r\nimport BulkController from './bulk-controller'\r\nimport {Row, Col} from 'reactstrap'\r\n\r\nconst Controller = ({term, handleSearch, toggleForm, handleFilter, view, changeView, clearSelected, clearCompleted, reset}) => (\r\n    <div>\r\n        <SearchPanel\r\n            term={term}\r\n            handleSearch={handleSearch}\r\n            toggleForm={toggleForm}\r\n        />\r\n        <Row className='my-4'>\r\n            <Col md={{size: 4}}>\r\n                <FilterController\r\n                    handleFilter={handleFilter}\r\n                />\r\n            </Col>\r\n            <Col md={{size: 4}}>\r\n                <ViewController\r\n                    view={view}\r\n                    changeView={changeView}\r\n                />\r\n            </Col>\r\n            <Col md={{size: 4}} className='d-flex'>\r\n                <div className=\"ml-auto\">\r\n                    <BulkController\r\n                        clearSelected={clearSelected}\r\n                        clearCompleted={clearCompleted}\r\n                        reset={reset}\r\n                    />\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n)\r\nController.propTypes = {\r\n    term: PropTypes.string.isRequired,\r\n    handleSearch: PropTypes.func.isRequired,\r\n    toggleForm: PropTypes.func.isRequired,\r\n\r\n    handleFilter: PropTypes.func.isRequired,\r\n\r\n    view: PropTypes.string.isRequired,\r\n    changeView: PropTypes.func.isRequired,\r\n\r\n    clearSelected: PropTypes.func.isRequired,\r\n    clearCompleted: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Controller","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {ListGroup, ListGroupItem, CustomInput, Button} from 'reactstrap'\r\n\r\n// ListItem Component\r\nconst ListItem = ({todo, toggleSelect, toggleComplete}) => (\r\n    <ListGroupItem className='d-flex align-items-center'>\r\n        <CustomInput \r\n            type='checkbox'\r\n            id={todo.id}\r\n            checked={todo.isSelect}\r\n            onChange={() => toggleSelect(todo.id)}\r\n        />\r\n        <div className=\"mx-3\">\r\n            <h4>{todo.text}</h4>\r\n            <p>{todo.time.toDateString()}</p>\r\n        </div>\r\n        <Button className='ml-auto' color={todo.isComplete ? 'danger' : 'success'} onClick={() => toggleComplete(todo.id)}>\r\n            {todo.isComplete ? 'Completed' : 'Running'}\r\n        </Button>\r\n    </ListGroupItem>\r\n)\r\nListItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    toggleSelect: PropTypes.func.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired\r\n}\r\n\r\nconst ListView = ({todos, toggleSelect, toggleComplete}) => {\r\n    return (\r\n        <ListGroup>\r\n            {todos.map(todo => (\r\n                <ListItem\r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    toggleSelect={toggleSelect}\r\n                    toggleComplete={toggleComplete}\r\n                />\r\n            ))}   \r\n        </ListGroup>\r\n    )\r\n}\r\nListView.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    toggleSelect: PropTypes.func.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ListView","import React from 'react'\r\nimport {Table, CustomInput, Button} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst RowItem = ({todo, toggleSelect, toggleComplete}) => (\r\n    <tr>\r\n        <td scope='row'>\r\n            <CustomInput\r\n                type='checkbox'\r\n                id={todo.id}\r\n                checked={todo.isSelect}\r\n                onChange={() => toggleSelect(todo.id)}\r\n            />\r\n        </td>\r\n        <td>\r\n            {todo.time.toDateString()}\r\n        </td>\r\n        <td>\r\n            {todo.text}\r\n        </td>\r\n        <td>\r\n            <Button color={todo.isComplete ? 'danger': 'success'} onClick={() => toggleComplete(todo.id)}>\r\n                {todo.isComplete ? 'Completed' : 'Running'}\r\n            </Button>\r\n        </td>\r\n    </tr>\r\n)\r\nRowItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired,\r\n    toggleSelect: PropTypes.func.isRequired\r\n}\r\n\r\nconst TableView = ({todos, toggleSelect, toggleComplete}) => (\r\n    <Table>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Time</th>\r\n                <th>Todo</th>\r\n                <th>Action</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {todos.map(todo => (\r\n                <RowItem\r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    toggleSelect={toggleSelect}\r\n                    toggleComplete={toggleComplete}\r\n                />\r\n            ))}\r\n        </tbody>\r\n    </Table>\r\n)\r\nTableView.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired,\r\n    toggleSelect: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TableView","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap'\r\n\r\nclass CreateTodoForm extends React.Component {\r\n    state = {\r\n        text: '',\r\n        description: ''\r\n    }\r\n    handleChange = event => {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        this.props.createTodo(this.state)\r\n        event.target.reset()\r\n        this.setState({text: '', description: ''})\r\n    }\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                    <Label>Enter Task</Label>\r\n                    <Input\r\n                        placeholder=\"do some code\"\r\n                        name=\"text\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.text}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label>Describe Task</Label>\r\n                    <Input\r\n                        placeholder=\"write some short description about your task\"\r\n                        name=\"description\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.description}\r\n                    />\r\n                </FormGroup>\r\n                <Button type='submit' >Create Task</Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\nCreateTodoForm.propTypes = {\r\n    createTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CreateTodoForm","import React, {Component} from 'react'\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap'\r\n\r\nimport Controller from '../controllers/'\r\nimport ListView from '../listview/'\r\nimport TableView from '../tableview/'\r\nimport CreateTodoForm from '../create-todo-form'\r\nimport shortid from 'shortid'\r\n\r\nclass Todos extends Component {\r\n    state = {\r\n        todos: [\r\n            {\r\n                id: '1',\r\n                text: 'Todo text 1',\r\n                description: 'Todo description 1',\r\n                time: new Date(),\r\n                isComplete: false,\r\n                isSelect: false\r\n            }, \r\n            {\r\n                id: '2',\r\n                text: 'Todo text 2',\r\n                description: 'Todo description 2',\r\n                time: new Date(),\r\n                isComplete: false,\r\n                isSelect: false\r\n            }\r\n        ],\r\n        isOpenTodoFrom: false,\r\n        searchTerm: '',\r\n        view: 'list',\r\n        filter: 'all'\r\n    }\r\n    toggleSelect = todoId => {\r\n        const todos = [...this.state.todos]\r\n        const todo = todos.find(t => t.id === todoId)\r\n        todo.isSelect = !todo.isSelect\r\n\r\n        this.setState({todos})\r\n    }\r\n    toggleComplete = todoId => {\r\n        const todos = [...this.state.todos]\r\n        const todo = todos.find(t => t.id === todoId)\r\n        todo.isComplete = !todo.isComplete\r\n\r\n        this.setState({todos})\r\n    }\r\n    toggleForm = () => {\r\n        this.setState({\r\n            isOpenTodoFrom: !this.state.isOpenTodoFrom\r\n        })\r\n    }\r\n    handleSearch = value => {\r\n        this.setState({\r\n            searchTerm: value\r\n        })\r\n    }\r\n    performSearch = () => {\r\n        return this.state.todos.filter(todo => todo.text.toLowerCase().includes(this.state.searchTerm.toLowerCase()))\r\n    }\r\n    createTodo = todo => {\r\n        todo.id = shortid.generate()\r\n        todo.time = new Date()\r\n        todo.isComplete = false\r\n        todo.isSelect = false\r\n\r\n        this.setState({todos: [todo, ...this.state.todos]})\r\n        this.toggleForm()\r\n    }\r\n    handleFilter = filter => {\r\n        this.setState({\r\n            filter\r\n        })\r\n    }\r\n    performFilter = todos => {\r\n        const {filter} = this.state\r\n        if(filter === 'completed') {\r\n            return todos.filter(todo => todo.isComplete) \r\n        } else if(filter === 'running') {\r\n            return todos.filter(todo => !todo.isComplete)\r\n        } else {\r\n            return todos\r\n        }\r\n    }\r\n    changeView = event => {\r\n        this.setState({\r\n            view: event.target.value\r\n        })\r\n    }\r\n    clearSelected = () => {\r\n        let todos = this.state.todos.filter(todo => !todo.isSelect)\r\n        console.log(todos)\r\n        this.setState({\r\n            todos\r\n        })\r\n    }\r\n    clearCompleted = () => {\r\n        let todos = this.state.todos.filter(todo => !todo.isComplete)\r\n        console.log(todos)\r\n        this.setState({\r\n            todos\r\n        })\r\n    }\r\n    reset = () => {\r\n        this.setState({\r\n            view: 'list',\r\n            searchTerm: '',\r\n            filter: 'all',\r\n            isOpenTodoFrom: false\r\n        })\r\n    }\r\n    getView = () => {\r\n        let todos = this.performSearch()\r\n        todos = this.performFilter(todos)\r\n        return this.state.view === 'list' ? (\r\n            <ListView\r\n                todos={todos}\r\n                toggleSelect={this.toggleSelect}\r\n                toggleComplete={this.toggleComplete}\r\n            />\r\n        ) : (\r\n            <TableView\r\n                todos={todos}\r\n                toggleSelect={this.toggleSelect}\r\n                toggleComplete={this.toggleComplete}\r\n            />\r\n        )\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1 className='text-center display-4 mb-5'>Stack Todos</h1>\r\n                <div>\r\n                    <Controller\r\n                        term={this.state.searchTerm}\r\n                        handleSearch={this.handleSearch}\r\n                        toggleForm={this.toggleForm}\r\n                        handleFilter={this.handleFilter}\r\n                        view={this.state.view}\r\n                        changeView={this.changeView}\r\n                        clearSelected={this.clearSelected}\r\n                        clearCompleted={this.clearCompleted}\r\n                        reset={this.reset}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    {this.getView()}\r\n                </div>\r\n                <Modal \r\n                    isOpen={this.state.isOpenTodoFrom}\r\n                    toggle={this.toggleForm}\r\n                >\r\n                    <ModalHeader toggle={this.toggleForm}>\r\n                        Create New Todo Item\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <CreateTodoForm\r\n                            createTodo={this.createTodo}\r\n                        />\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todos\r\n","import React from 'react'\r\nimport {Container, Row, Col} from 'reactstrap'\r\nimport Todos from './components/todos/'\r\n\r\nconst App = () => {\r\n    return (\r\n        <Container className='my-3'>\r\n            <Row>\r\n                <Col>\r\n                    <Todos/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}